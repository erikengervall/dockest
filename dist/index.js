!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.dockest=t():e.dockest=t()}(global,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(5),o={info:(e,t="")=>console.info(`${e}`,t),loading:(e,t="")=>console.info(`${n.ICONS.LOADING} ${e}`,t),stop:(e,t="")=>console.info(`${n.ICONS.STOPPED} ${e}`,t),success:(e,t="")=>console.info(`${n.ICONS.SUCCESS} ${e}`,t,"\n"),failed:(e,t="")=>console.error(`${n.ICONS.FAILED} ${e}`,t,"\n"),error:(e,t="")=>console.error(`${n.ICONS.ERROR} ${e}`,t,"\n")};t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(15);t.ConfigurationError=n.default;var o=r(16);t.DockestError=o.default},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(12)),s=r(13),i=r(7),a=n(r(51)),c=n(r(0)),{keys:u}=Object;class l{constructor(e){this.run=(async()=>{o.default(),c.default.loading("Integration test initiated"),await this.setupRunners();const e=new a.default(l.config.jest),t=await e.run();l.jestRanWithResult=!0,await this.teardownRunners(),t.success?process.exit(0):process.exit(1)}),this.setupRunners=(async()=>{const{runners:e}=l.config;for(const t of u(e))await e[t].setup()}),this.teardownRunners=(async()=>{const{runners:e}=l.config;for(const t of u(e))await e[t].teardown(t)});const{dockest:r,jest:n}=e,s={dockest:r,jest:n,runners:t.runners};i.validateInputFields("Dockest",s),l.config=e,l.jestRanWithResult=!1}}t.runners={PostgresRunner:s.PostgresRunner},t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ICONS={LOADING:"⏳",SUCCESS:"✅",FAILED:"🔥",ERROR:"❌",STOPPED:"🛑",WARNING:"⚠️",INFO:"ℹ️"}},function(e,t,r){"use strict";const n=r(2),o=r(9),s=r(17),i=r(31),a=r(32),c=r(33),u=r(34),l=r(40),f=r(41),p=r(45),d=r(47),h=1e7;function m(e,t,r){let o;return(r=Object.assign({extendEnv:!0,env:{}},r)).extendEnv&&(r.env=Object.assign({},process.env,r.env)),!0===r.__winShell?(delete r.__winShell,o={command:e,args:t,options:r,file:e,original:{cmd:e,args:t}}):o=s._parse(e,t,r),(r=Object.assign({maxBuffer:h,buffer:!0,stripEof:!0,preferLocal:!0,localDir:o.options.cwd||process.cwd(),encoding:"utf8",reject:!0,cleanup:!0},o.options)).stdio=d(r),r.preferLocal&&(r.env=a.env(Object.assign({},r,{cwd:r.localDir}))),r.detached&&(r.cleanup=!1),"win32"===process.platform&&"cmd.exe"===n.basename(o.command)&&o.args.unshift("/q"),{cmd:o.command,args:o.args,opts:r,parsed:o}}function v(e,t){return t&&e.stripEof&&(t=i(t)),t}function g(e,t,r){let n="/bin/sh",o=["-c",t];return r=Object.assign({},r),"win32"===process.platform&&(r.__winShell=!0,n=process.env.comspec||"cmd.exe",o=["/s","/c",`"${t}"`],r.windowsVerbatimArguments=!0),r.shell&&(n=r.shell,delete r.shell),e(n,o,r)}function y(e,t,{encoding:r,buffer:n,maxBuffer:o}){if(!e[t])return null;let s;return(s=n?r?u(e[t],{encoding:r,maxBuffer:o}):u.buffer(e[t],{maxBuffer:o}):new Promise((r,n)=>{e[t].once("end",r).once("error",n)})).catch(e=>{throw e.stream=t,e.message=`${t} ${e.message}`,e})}function w(e,t){const{stdout:r,stderr:n}=e;let o=e.error;const{code:s,signal:i}=e,{parsed:a,joinedCmd:c}=t,u=t.timedOut||!1;if(!o){let e="";Array.isArray(a.opts.stdio)?("inherit"!==a.opts.stdio[2]&&(e+=e.length>0?n:`\n${n}`),"inherit"!==a.opts.stdio[1]&&(e+=`\n${r}`)):"inherit"!==a.opts.stdio&&(e=`\n${n}${r}`),(o=new Error(`Command failed: ${c}${e}`)).code=s<0?p(s):s}return o.stdout=r,o.stderr=n,o.failed=!0,o.signal=i||null,o.cmd=c,o.timedOut=u,o}function x(e,t){let r=e;return Array.isArray(t)&&t.length>0&&(r+=" "+t.join(" ")),r}e.exports=((e,t,r)=>{const n=m(e,t,r),{encoding:i,buffer:a,maxBuffer:u}=n.opts,p=x(e,t);let d,h;try{d=o.spawn(n.cmd,n.args,n.opts)}catch(e){return Promise.reject(e)}n.opts.cleanup&&(h=f(()=>{d.kill()}));let g=null,b=!1;const E=()=>{g&&(clearTimeout(g),g=null),h&&h()};n.opts.timeout>0&&(g=setTimeout(()=>{g=null,b=!0,d.kill(n.opts.killSignal)},n.opts.timeout));const j=new Promise(e=>{d.on("exit",(t,r)=>{E(),e({code:t,signal:r})}),d.on("error",t=>{E(),e({error:t})}),d.stdin&&d.stdin.on("error",t=>{E(),e({error:t})})});function _(){d.stdout&&d.stdout.destroy(),d.stderr&&d.stderr.destroy()}const S=()=>l(Promise.all([j,y(d,"stdout",{encoding:i,buffer:a,maxBuffer:u}),y(d,"stderr",{encoding:i,buffer:a,maxBuffer:u})]).then(e=>{const t=e[0];if(t.stdout=e[1],t.stderr=e[2],t.error||0!==t.code||null!==t.signal){const e=w(t,{joinedCmd:p,parsed:n,timedOut:b});if(e.killed=e.killed||d.killed,!n.opts.reject)return e;throw e}return{stdout:v(n.opts,t.stdout),stderr:v(n.opts,t.stderr),code:0,failed:!1,killed:!1,signal:null,cmd:p,timedOut:!1}}),_);return s._enoent.hookChildProcess(d,n.parsed),function(e,t){null!=t&&(c(t)?t.pipe(e.stdin):e.stdin.end(t))}(d,n.opts.input),d.then=((e,t)=>S().then(e,t)),d.catch=(e=>S().catch(e)),d}),e.exports.stdout=((...t)=>e.exports(...t).then(e=>e.stdout)),e.exports.stderr=((...t)=>e.exports(...t).then(e=>e.stderr)),e.exports.shell=((t,r)=>g(e.exports,t,r)),e.exports.sync=((e,t,r)=>{const n=m(e,t,r),s=x(e,t);if(c(n.opts.input))throw new TypeError("The `input` option cannot be a stream in sync mode");const i=o.spawnSync(n.cmd,n.args,n.opts);if(i.code=i.status,i.error||0!==i.status||null!==i.signal){const e=w(i,{joinedCmd:s,parsed:n});if(!n.opts.reject)return e;throw e}return{stdout:v(n.opts,i.stdout),stderr:v(n.opts,i.stderr),code:0,failed:!1,signal:null,cmd:s,timedOut:!1}}),e.exports.shellSync=((t,r)=>g(e.exports.sync,t,r))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);t.validateInputFields=((e,t)=>{const r=Object.keys(t).reduce((e,r)=>t[r]?e:e.concat(r),[]);if(0!==r.length)throw new n.ConfigurationError(`Invalid ${e} configuration, missing required fields: [${r.join(", ")}]`)})},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(6)),s=n(r(48)),i=n(r(0));t.sleep=((e=1e3)=>new Promise(t=>setTimeout(t,e)));t.acquireConnection=((e="localhost",t)=>new Promise((r,n)=>{let o=!1,i=null;const a=s.default.createConnection({host:e,port:t}).on("connect",()=>{clearTimeout(i),o=!0,a.end(),r()}).on("error",()=>{o=!1});i=setTimeout(()=>!o&&n(new Error("Timeout while acquiring connection")),1e3)}));t.getContainerId=(async e=>{const{stdout:t}=await o.default.shell(`docker ps --quiet --filter "name=${e}" --no-trunc --latest`);return t});t.runCustomCommand=(async e=>{i.default.loading(`Running custom command: ${e}`);const{stdout:t=""}=await o.default.shell(e);i.default.success(`Successfully ran custom command: ${"object"==typeof t?JSON.stringify(t):t}`)})},function(e,t){e.exports=require("child_process")},function(e,t,r){"use strict";e.exports=(e=>{const t=(e=e||{}).env||process.env;return"win32"!==(e.platform||process.platform)?"PATH":Object.keys(t).find(e=>"PATH"===e.toUpperCase())||"Path"})},function(e,t,r){var n=r(36);function o(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function s(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}e.exports=n(o),e.exports.strict=n(s),o.proto=o(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return s(this)},configurable:!0})})},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(4)),s=n(r(0)),{keys:i}=Object;t.default=(async()=>{const e=o.default.config,{runners:t}=e,r=async n=>{if(!o.default.jestRanWithResult){if(s.default.info("Exithandler invoced",n),e.dockest&&e.dockest.exitHandler&&"function"==typeof r){const t=n.error||new Error("Failed to extract error");e.dockest.exitHandler(t)}for(const e of i(t))await t[e].teardown(e);s.default.info("Exit with payload"),process.exit(n.code||1)}};process.stdin.resume(),process.on("exit",async e=>r({code:e})),process.on("SIGINT",async e=>r({signal:e})),process.on("SIGUSR1",async()=>r({})),process.on("SIGUSR2",async()=>r({})),process.on("uncaughtException",async e=>r({error:e})),process.on("unhandledRejection",async(e,t)=>r({reason:e,p:t}))})},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(14));t.PostgresRunner=o.default},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(1),s=n(r(4)),i=r(7),a=r(8),c=n(r(49)),u={commands:[]};class l{constructor(e){this.setup=(async()=>{const e=s.default.config.dockest.dockerComposeFilePath,t=await this.postgresExec.start(this.config,e);this.containerId=t,await this.postgresExec.checkHealth(t,this.config);const r=this.config.commands||[];for(const e of r)await a.runCustomCommand(e)}),this.teardown=(async e=>this.postgresExec.teardown(this.containerId,e)),this.getHelpers=(async()=>({clear:()=>!0,loadData:()=>!0})),this.validatePostgresConfig=(e=>{if(!e)throw new o.ConfigurationError("Missing configuration for Postgres runner");const{service:t,host:r,database:n,port:s,password:a,username:c}=e,u={service:t,host:r,database:n,port:s,password:a,username:c};i.validateInputFields("postgres",u)}),this.validatePostgresConfig(e),this.config=Object.assign({},u,e),this.postgresExec=new c.default,this.containerId=""}}t.PostgresRunner=l,t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(5);class o extends Error{constructor(e){super(`${n.ICONS.ERROR} Invalid configuration: ${e}}`),Error.captureStackTrace&&Error.captureStackTrace(this,o)}}t.ConfigurationError=o,t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(5);class o extends Error{constructor(e,t={}){super(`${n.ICONS.ERROR} ${e}`),Error.captureStackTrace&&Error.captureStackTrace(this,o),this.payload=t,this.timestamp=new Date}}t.DockestError=o,t.default=o},function(e,t,r){"use strict";const n=r(9),o=r(18),s=r(30);function i(e,t,r){const i=o(e,t,r),a=n.spawn(i.command,i.args,i.options);return s.hookChildProcess(a,i),a}e.exports=i,e.exports.spawn=i,e.exports.sync=function(e,t,r){const i=o(e,t,r),a=n.spawnSync(i.command,i.args,i.options);return a.error=a.error||s.verifyENOENTSync(a.status,i),a},e.exports._parse=o,e.exports._enoent=s},function(e,t,r){"use strict";const n=r(2),o=r(19),s=r(20),i=r(25),a=r(26),c=r(29),u="win32"===process.platform,l=/\.(?:com|exe)$/i,f=/node_modules[\\\/].bin[\\\/][^\\\/]+\.cmd$/i,p=o(()=>c.satisfies(process.version,"^4.8.0 || ^5.7.0 || >= 6.0.0",!0))||!1;function d(e){if(!u)return e;const t=function(e){e.file=s(e);const t=e.file&&a(e.file);return t?(e.args.unshift(e.file),e.command=t,s(e)):e.file}(e),r=!l.test(t);if(e.options.forceShell||r){const r=f.test(t);e.command=n.normalize(e.command),e.command=i.command(e.command),e.args=e.args.map(e=>i.argument(e,r));const o=[e.command].concat(e.args).join(" ");e.args=["/d","/s","/c",`"${o}"`],e.command=process.env.comspec||"cmd.exe",e.options.windowsVerbatimArguments=!0}return e}e.exports=function(e,t,r){t&&!Array.isArray(t)&&(r=t,t=null);const n={command:e,args:t=t?t.slice(0):[],options:r=Object.assign({},r),file:void 0,original:{command:e,args:t}};return r.shell?function(e){if(p)return e;const t=[e.command].concat(e.args).join(" ");return u?(e.command="string"==typeof e.options.shell?e.options.shell:process.env.comspec||"cmd.exe",e.args=["/d","/s","/c",`"${t}"`],e.options.windowsVerbatimArguments=!0):("string"==typeof e.options.shell?e.command=e.options.shell:"android"===process.platform?e.command="/system/bin/sh":e.command="/bin/sh",e.args=["-c",t]),e}(n):d(n)}},function(e,t,r){"use strict";e.exports=function(e){try{return e()}catch(e){}}},function(e,t,r){"use strict";const n=r(2),o=r(21),s=r(10)();function i(e,t){const r=process.cwd(),i=null!=e.options.cwd;if(i)try{process.chdir(e.options.cwd)}catch(e){}let a;try{a=o.sync(e.command,{path:(e.options.env||process.env)[s],pathExt:t?n.delimiter:void 0})}catch(e){}finally{process.chdir(r)}return a&&(a=n.resolve(i?e.options.cwd:"",a)),a}e.exports=function(e){return i(e)||i(e,!0)}},function(e,t,r){e.exports=u,u.sync=function(e,t){for(var r=c(e,t=t||{}),n=r.env,s=r.ext,u=r.extExe,l=[],f=0,p=n.length;f<p;f++){var d=n[f];'"'===d.charAt(0)&&'"'===d.slice(-1)&&(d=d.slice(1,-1));var h=o.join(d,e);!d&&/^\.[\\\/]/.test(e)&&(h=e.slice(0,2)+h);for(var m=0,v=s.length;m<v;m++){var g=h+s[m];try{if(i.sync(g,{pathExt:u})){if(!t.all)return g;l.push(g)}}catch(e){}}}if(t.all&&l.length)return l;if(t.nothrow)return null;throw a(e)};var n="win32"===process.platform||"cygwin"===process.env.OSTYPE||"msys"===process.env.OSTYPE,o=r(2),s=n?";":":",i=r(22);function a(e){var t=new Error("not found: "+e);return t.code="ENOENT",t}function c(e,t){var r=t.colon||s,o=t.path||process.env.PATH||"",i=[""];o=o.split(r);var a="";return n&&(o.unshift(process.cwd()),i=(a=t.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM").split(r),-1!==e.indexOf(".")&&""!==i[0]&&i.unshift("")),(e.match(/\//)||n&&e.match(/\\/))&&(o=[""]),{env:o,ext:i,extExe:a}}function u(e,t,r){"function"==typeof t&&(r=t,t={});var n=c(e,t),s=n.env,u=n.ext,l=n.extExe,f=[];!function n(c,p){if(c===p)return t.all&&f.length?r(null,f):r(a(e));var d=s[c];'"'===d.charAt(0)&&'"'===d.slice(-1)&&(d=d.slice(1,-1));var h=o.join(d,e);!d&&/^\.[\\\/]/.test(e)&&(h=e.slice(0,2)+h),function e(o,s){if(o===s)return n(c+1,p);var a=u[o];i(h+a,{pathExt:l},function(n,i){if(!n&&i){if(!t.all)return r(null,h+a);f.push(h+a)}return e(o+1,s)})}(0,u.length)}(0,s.length)}},function(e,t,r){var n;r(3);function o(e,t,r){if("function"==typeof t&&(r=t,t={}),!r){if("function"!=typeof Promise)throw new TypeError("callback not provided");return new Promise(function(r,n){o(e,t||{},function(e,t){e?n(e):r(t)})})}n(e,t||{},function(e,n){e&&("EACCES"===e.code||t&&t.ignoreErrors)&&(e=null,n=!1),r(e,n)})}n="win32"===process.platform||global.TESTING_WINDOWS?r(23):r(24),e.exports=o,o.sync=function(e,t){try{return n.sync(e,t||{})}catch(e){if(t&&t.ignoreErrors||"EACCES"===e.code)return!1;throw e}}},function(e,t,r){e.exports=s,s.sync=function(e,t){return o(n.statSync(e),e,t)};var n=r(3);function o(e,t,r){return!(!e.isSymbolicLink()&&!e.isFile())&&function(e,t){var r=void 0!==t.pathExt?t.pathExt:process.env.PATHEXT;if(!r)return!0;if(-1!==(r=r.split(";")).indexOf(""))return!0;for(var n=0;n<r.length;n++){var o=r[n].toLowerCase();if(o&&e.substr(-o.length).toLowerCase()===o)return!0}return!1}(t,r)}function s(e,t,r){n.stat(e,function(n,s){r(n,!n&&o(s,e,t))})}},function(e,t,r){e.exports=o,o.sync=function(e,t){return s(n.statSync(e),t)};var n=r(3);function o(e,t,r){n.stat(e,function(e,n){r(e,!e&&s(n,t))})}function s(e,t){return e.isFile()&&function(e,t){var r=e.mode,n=e.uid,o=e.gid,s=void 0!==t.uid?t.uid:process.getuid&&process.getuid(),i=void 0!==t.gid?t.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),u=parseInt("001",8),l=a|c;return r&u||r&c&&o===i||r&a&&n===s||r&l&&0===s}(e,t)}},function(e,t,r){"use strict";const n=/([()\][%!^"`<>&|;, *?])/g;e.exports.command=function(e){return e=e.replace(n,"^$1")},e.exports.argument=function(e,t){return e=(e=`"${e=(e=(e=`${e}`).replace(/(\\*)"/g,'$1$1\\"')).replace(/(\\*)$/,"$1$1")}"`).replace(n,"^$1"),t&&(e=e.replace(n,"^$1")),e}},function(e,t,r){"use strict";const n=r(3),o=r(27);e.exports=function(e){let t,r;Buffer.alloc?t=Buffer.alloc(150):(t=new Buffer(150)).fill(0);try{r=n.openSync(e,"r"),n.readSync(r,t,0,150,0),n.closeSync(r)}catch(e){}return o(t.toString())}},function(e,t,r){"use strict";var n=r(28);e.exports=function(e){var t=e.match(n);if(!t)return null;var r=t[0].replace(/#! ?/,"").split(" "),o=r[0].split("/").pop(),s=r[1];return"env"===o?s:o+(s?" "+s:"")}},function(e,t,r){"use strict";e.exports=/^#!.*/},function(e,t){var r;t=e.exports=X,r="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},t.SEMVER_SPEC_VERSION="2.0.0";var n=256,o=Number.MAX_SAFE_INTEGER||9007199254740991,s=t.re=[],i=t.src=[],a=0,c=a++;i[c]="0|[1-9]\\d*";var u=a++;i[u]="[0-9]+";var l=a++;i[l]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var f=a++;i[f]="("+i[c]+")\\.("+i[c]+")\\.("+i[c]+")";var p=a++;i[p]="("+i[u]+")\\.("+i[u]+")\\.("+i[u]+")";var d=a++;i[d]="(?:"+i[c]+"|"+i[l]+")";var h=a++;i[h]="(?:"+i[u]+"|"+i[l]+")";var m=a++;i[m]="(?:-("+i[d]+"(?:\\."+i[d]+")*))";var v=a++;i[v]="(?:-?("+i[h]+"(?:\\."+i[h]+")*))";var g=a++;i[g]="[0-9A-Za-z-]+";var y=a++;i[y]="(?:\\+("+i[g]+"(?:\\."+i[g]+")*))";var w=a++,x="v?"+i[f]+i[m]+"?"+i[y]+"?";i[w]="^"+x+"$";var b="[v=\\s]*"+i[p]+i[v]+"?"+i[y]+"?",E=a++;i[E]="^"+b+"$";var j=a++;i[j]="((?:<|>)?=?)";var _=a++;i[_]=i[u]+"|x|X|\\*";var S=a++;i[S]=i[c]+"|x|X|\\*";var O=a++;i[O]="[v=\\s]*("+i[S]+")(?:\\.("+i[S]+")(?:\\.("+i[S]+")(?:"+i[m]+")?"+i[y]+"?)?)?";var $=a++;i[$]="[v=\\s]*("+i[_]+")(?:\\.("+i[_]+")(?:\\.("+i[_]+")(?:"+i[v]+")?"+i[y]+"?)?)?";var P=a++;i[P]="^"+i[j]+"\\s*"+i[O]+"$";var I=a++;i[I]="^"+i[j]+"\\s*"+i[$]+"$";var k=a++;i[k]="(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";var C=a++;i[C]="(?:~>?)";var T=a++;i[T]="(\\s*)"+i[C]+"\\s+",s[T]=new RegExp(i[T],"g");var R=a++;i[R]="^"+i[C]+i[O]+"$";var A=a++;i[A]="^"+i[C]+i[$]+"$";var M=a++;i[M]="(?:\\^)";var N=a++;i[N]="(\\s*)"+i[M]+"\\s+",s[N]=new RegExp(i[N],"g");var D=a++;i[D]="^"+i[M]+i[O]+"$";var L=a++;i[L]="^"+i[M]+i[$]+"$";var G=a++;i[G]="^"+i[j]+"\\s*("+b+")$|^$";var q=a++;i[q]="^"+i[j]+"\\s*("+x+")$|^$";var B=a++;i[B]="(\\s*)"+i[j]+"\\s*("+b+"|"+i[O]+")",s[B]=new RegExp(i[B],"g");var F=a++;i[F]="^\\s*("+i[O]+")\\s+-\\s+("+i[O]+")\\s*$";var V=a++;i[V]="^\\s*("+i[$]+")\\s+-\\s+("+i[$]+")\\s*$";var U=a++;i[U]="(<|>)?=?\\s*\\*";for(var H=0;H<35;H++)r(H,i[H]),s[H]||(s[H]=new RegExp(i[H]));function J(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof X)return e;if("string"!=typeof e)return null;if(e.length>n)return null;if(!(t.loose?s[E]:s[w]).test(e))return null;try{return new X(e,t)}catch(e){return null}}function X(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof X){if(e.loose===t.loose)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>n)throw new TypeError("version is longer than "+n+" characters");if(!(this instanceof X))return new X(e,t);r("SemVer",e,t),this.options=t,this.loose=!!t.loose;var i=e.trim().match(t.loose?s[E]:s[w]);if(!i)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+i[1],this.minor=+i[2],this.patch=+i[3],this.major>o||this.major<0)throw new TypeError("Invalid major version");if(this.minor>o||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>o||this.patch<0)throw new TypeError("Invalid patch version");i[4]?this.prerelease=i[4].split(".").map(function(e){if(/^[0-9]+$/.test(e)){var t=+e;if(t>=0&&t<o)return t}return e}):this.prerelease=[],this.build=i[5]?i[5].split("."):[],this.format()}t.parse=J,t.valid=function(e,t){var r=J(e,t);return r?r.version:null},t.clean=function(e,t){var r=J(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},t.SemVer=X,X.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},X.prototype.toString=function(){return this.version},X.prototype.compare=function(e){return r("SemVer.compare",this.version,this.options,e),e instanceof X||(e=new X(e,this.options)),this.compareMain(e)||this.comparePre(e)},X.prototype.compareMain=function(e){return e instanceof X||(e=new X(e,this.options)),z(this.major,e.major)||z(this.minor,e.minor)||z(this.patch,e.patch)},X.prototype.comparePre=function(e){if(e instanceof X||(e=new X(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var n=this.prerelease[t],o=e.prerelease[t];if(r("prerelease compare",t,n,o),void 0===n&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===n)return-1;if(n!==o)return z(n,o)}while(++t)},X.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)"number"==typeof this.prerelease[r]&&(this.prerelease[r]++,r=-2);-1===r&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},t.inc=function(e,t,r,n){"string"==typeof r&&(n=r,r=void 0);try{return new X(e,r).inc(t,n).version}catch(e){return null}},t.diff=function(e,t){if(Q(e,t))return null;var r=J(e),n=J(t);if(r.prerelease.length||n.prerelease.length){for(var o in r)if(("major"===o||"minor"===o||"patch"===o)&&r[o]!==n[o])return"pre"+o;return"prerelease"}for(var o in r)if(("major"===o||"minor"===o||"patch"===o)&&r[o]!==n[o])return o},t.compareIdentifiers=z;var W=/^[0-9]+$/;function z(e,t){var r=W.test(e),n=W.test(t);return r&&n&&(e=+e,t=+t),r&&!n?-1:n&&!r?1:e<t?-1:e>t?1:0}function Z(e,t,r){return new X(e,r).compare(new X(t,r))}function Y(e,t,r){return Z(e,t,r)>0}function K(e,t,r){return Z(e,t,r)<0}function Q(e,t,r){return 0===Z(e,t,r)}function ee(e,t,r){return 0!==Z(e,t,r)}function te(e,t,r){return Z(e,t,r)>=0}function re(e,t,r){return Z(e,t,r)<=0}function ne(e,t,r,n){var o;switch(t){case"===":"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),o=e===r;break;case"!==":"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),o=e!==r;break;case"":case"=":case"==":o=Q(e,r,n);break;case"!=":o=ee(e,r,n);break;case">":o=Y(e,r,n);break;case">=":o=te(e,r,n);break;case"<":o=K(e,r,n);break;case"<=":o=re(e,r,n);break;default:throw new TypeError("Invalid operator: "+t)}return o}function oe(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof oe){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof oe))return new oe(e,t);r("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===se?this.value="":this.value=this.operator+this.semver.version,r("comp",this)}t.rcompareIdentifiers=function(e,t){return z(t,e)},t.major=function(e,t){return new X(e,t).major},t.minor=function(e,t){return new X(e,t).minor},t.patch=function(e,t){return new X(e,t).patch},t.compare=Z,t.compareLoose=function(e,t){return Z(e,t,!0)},t.rcompare=function(e,t,r){return Z(t,e,r)},t.sort=function(e,r){return e.sort(function(e,n){return t.compare(e,n,r)})},t.rsort=function(e,r){return e.sort(function(e,n){return t.rcompare(e,n,r)})},t.gt=Y,t.lt=K,t.eq=Q,t.neq=ee,t.gte=te,t.lte=re,t.cmp=ne,t.Comparator=oe;var se={};function ie(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof ie)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new ie(e.raw,t);if(e instanceof oe)return new ie(e.value,t);if(!(this instanceof ie))return new ie(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(function(e){return this.parseRange(e.trim())},this).filter(function(e){return e.length}),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}function ae(e){return!e||"x"===e.toLowerCase()||"*"===e}function ce(e,t,r,n,o,s,i,a,c,u,l,f,p){return((t=ae(r)?"":ae(n)?">="+r+".0.0":ae(o)?">="+r+"."+n+".0":">="+t)+" "+(a=ae(c)?"":ae(u)?"<"+(+c+1)+".0.0":ae(l)?"<"+c+"."+(+u+1)+".0":f?"<="+c+"."+u+"."+l+"-"+f:"<="+a)).trim()}function ue(e,t,n){for(var o=0;o<e.length;o++)if(!e[o].test(t))return!1;if(n||(n={}),t.prerelease.length&&!n.includePrerelease){for(o=0;o<e.length;o++)if(r(e[o].semver),e[o].semver!==se&&e[o].semver.prerelease.length>0){var s=e[o].semver;if(s.major===t.major&&s.minor===t.minor&&s.patch===t.patch)return!0}return!1}return!0}function le(e,t,r){try{t=new ie(t,r)}catch(e){return!1}return t.test(e)}function fe(e,t,r,n){var o,s,i,a,c;switch(e=new X(e,n),t=new ie(t,n),r){case">":o=Y,s=re,i=K,a=">",c=">=";break;case"<":o=K,s=te,i=Y,a="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(le(e,t,n))return!1;for(var u=0;u<t.set.length;++u){var l=t.set[u],f=null,p=null;if(l.forEach(function(e){e.semver===se&&(e=new oe(">=0.0.0")),f=f||e,p=p||e,o(e.semver,f.semver,n)?f=e:i(e.semver,p.semver,n)&&(p=e)}),f.operator===a||f.operator===c)return!1;if((!p.operator||p.operator===a)&&s(e,p.semver))return!1;if(p.operator===c&&i(e,p.semver))return!1}return!0}oe.prototype.parse=function(e){var t=this.options.loose?s[G]:s[q],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],"="===this.operator&&(this.operator=""),r[2]?this.semver=new X(r[2],this.options.loose):this.semver=se},oe.prototype.toString=function(){return this.value},oe.prototype.test=function(e){return r("Comparator.test",e,this.options.loose),this.semver===se||("string"==typeof e&&(e=new X(e,this.options)),ne(e,this.operator,this.semver,this.options))},oe.prototype.intersects=function(e,t){if(!(e instanceof oe))throw new TypeError("a Comparator is required");var r;if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return r=new ie(e.value,t),le(this.value,r,t);if(""===e.operator)return r=new ie(this.value,t),le(e.semver,r,t);var n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),o=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),s=this.semver.version===e.semver.version,i=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=ne(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),c=ne(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||o||s&&i||a||c},t.Range=ie,ie.prototype.format=function(){return this.range=this.set.map(function(e){return e.join(" ").trim()}).join("||").trim(),this.range},ie.prototype.toString=function(){return this.range},ie.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var n=t?s[V]:s[F];e=e.replace(n,ce),r("hyphen replace",e),e=e.replace(s[B],"$1$2$3"),r("comparator trim",e,s[B]),e=(e=(e=e.replace(s[T],"$1~")).replace(s[N],"$1^")).split(/\s+/).join(" ");var o=t?s[G]:s[q],i=e.split(" ").map(function(e){return function(e,t){return r("comp",e,t),e=function(e,t){return e.trim().split(/\s+/).map(function(e){return function(e,t){r("caret",e,t),t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1});var n=t.loose?s[L]:s[D];return e.replace(n,function(t,n,o,s,i){var a;return r("caret",e,t,n,o,s,i),ae(n)?a="":ae(o)?a=">="+n+".0.0 <"+(+n+1)+".0.0":ae(s)?a="0"===n?">="+n+"."+o+".0 <"+n+"."+(+o+1)+".0":">="+n+"."+o+".0 <"+(+n+1)+".0.0":i?(r("replaceCaret pr",i),"-"!==i.charAt(0)&&(i="-"+i),a="0"===n?"0"===o?">="+n+"."+o+"."+s+i+" <"+n+"."+o+"."+(+s+1):">="+n+"."+o+"."+s+i+" <"+n+"."+(+o+1)+".0":">="+n+"."+o+"."+s+i+" <"+(+n+1)+".0.0"):(r("no pr"),a="0"===n?"0"===o?">="+n+"."+o+"."+s+" <"+n+"."+o+"."+(+s+1):">="+n+"."+o+"."+s+" <"+n+"."+(+o+1)+".0":">="+n+"."+o+"."+s+" <"+(+n+1)+".0.0"),r("caret return",a),a})}(e,t)}).join(" ")}(e,t),r("caret",e),e=function(e,t){return e.trim().split(/\s+/).map(function(e){return function(e,t){t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1});var n=t.loose?s[A]:s[R];return e.replace(n,function(t,n,o,s,i){var a;return r("tilde",e,t,n,o,s,i),ae(n)?a="":ae(o)?a=">="+n+".0.0 <"+(+n+1)+".0.0":ae(s)?a=">="+n+"."+o+".0 <"+n+"."+(+o+1)+".0":i?(r("replaceTilde pr",i),"-"!==i.charAt(0)&&(i="-"+i),a=">="+n+"."+o+"."+s+i+" <"+n+"."+(+o+1)+".0"):a=">="+n+"."+o+"."+s+" <"+n+"."+(+o+1)+".0",r("tilde return",a),a})}(e,t)}).join(" ")}(e,t),r("tildes",e),e=function(e,t){return r("replaceXRanges",e,t),e.split(/\s+/).map(function(e){return function(e,t){e=e.trim(),t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1});var n=t.loose?s[I]:s[P];return e.replace(n,function(t,n,o,s,i,a){r("xRange",e,t,n,o,s,i,a);var c=ae(o),u=c||ae(s),l=u||ae(i),f=l;return"="===n&&f&&(n=""),c?t=">"===n||"<"===n?"<0.0.0":"*":n&&f?(u&&(s=0),l&&(i=0),">"===n?(n=">=",u?(o=+o+1,s=0,i=0):l&&(s=+s+1,i=0)):"<="===n&&(n="<",u?o=+o+1:s=+s+1),t=n+o+"."+s+"."+i):u?t=">="+o+".0.0 <"+(+o+1)+".0.0":l&&(t=">="+o+"."+s+".0 <"+o+"."+(+s+1)+".0"),r("xRange return",t),t})}(e,t)}).join(" ")}(e,t),r("xrange",e),e=function(e,t){return r("replaceStars",e,t),e.trim().replace(s[U],"")}(e,t),r("stars",e),e}(e,this.options)},this).join(" ").split(/\s+/);return this.options.loose&&(i=i.filter(function(e){return!!e.match(o)})),i=i.map(function(e){return new oe(e,this.options)},this)},ie.prototype.intersects=function(e,t){if(!(e instanceof ie))throw new TypeError("a Range is required");return this.set.some(function(r){return r.every(function(r){return e.set.some(function(e){return e.every(function(e){return r.intersects(e,t)})})})})},t.toComparators=function(e,t){return new ie(e,t).set.map(function(e){return e.map(function(e){return e.value}).join(" ").trim().split(" ")})},ie.prototype.test=function(e){if(!e)return!1;"string"==typeof e&&(e=new X(e,this.options));for(var t=0;t<this.set.length;t++)if(ue(this.set[t],e,this.options))return!0;return!1},t.satisfies=le,t.maxSatisfying=function(e,t,r){var n=null,o=null;try{var s=new ie(t,r)}catch(e){return null}return e.forEach(function(e){s.test(e)&&(n&&-1!==o.compare(e)||(o=new X(n=e,r)))}),n},t.minSatisfying=function(e,t,r){var n=null,o=null;try{var s=new ie(t,r)}catch(e){return null}return e.forEach(function(e){s.test(e)&&(n&&1!==o.compare(e)||(o=new X(n=e,r)))}),n},t.validRange=function(e,t){try{return new ie(e,t).range||"*"}catch(e){return null}},t.ltr=function(e,t,r){return fe(e,t,"<",r)},t.gtr=function(e,t,r){return fe(e,t,">",r)},t.outside=fe,t.prerelease=function(e,t){var r=J(e,t);return r&&r.prerelease.length?r.prerelease:null},t.intersects=function(e,t,r){return e=new ie(e,r),t=new ie(t,r),e.intersects(t)},t.coerce=function(e){if(e instanceof X)return e;if("string"!=typeof e)return null;var t=e.match(s[k]);return null==t?null:J((t[1]||"0")+"."+(t[2]||"0")+"."+(t[3]||"0"))}},function(e,t,r){"use strict";const n="win32"===process.platform;function o(e,t){return Object.assign(new Error(`${t} ${e.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${t} ${e.command}`,path:e.command,spawnargs:e.args})}function s(e,t){return n&&1===e&&!t.file?o(t.original,"spawn"):null}e.exports={hookChildProcess:function(e,t){if(!n)return;const r=e.emit;e.emit=function(n,o){if("exit"===n){const n=s(o,t);if(n)return r.call(e,"error",n)}return r.apply(e,arguments)}},verifyENOENT:s,verifyENOENTSync:function(e,t){return n&&1===e&&!t.file?o(t.original,"spawnSync"):null},notFoundError:o}},function(e,t,r){"use strict";e.exports=function(e){var t="string"==typeof e?"\n":"\n".charCodeAt(),r="string"==typeof e?"\r":"\r".charCodeAt();return e[e.length-1]===t&&(e=e.slice(0,e.length-1)),e[e.length-1]===r&&(e=e.slice(0,e.length-1)),e}},function(e,t,r){"use strict";const n=r(2),o=r(10);e.exports=(e=>{let t;e=Object.assign({cwd:process.cwd(),path:process.env[o()]},e);let r=n.resolve(e.cwd);const s=[];for(;t!==r;)s.push(n.join(r,"node_modules/.bin")),t=r,r=n.resolve(r,"..");return s.push(n.dirname(process.execPath)),s.concat(e.path).join(n.delimiter)}),e.exports.env=(t=>{t=Object.assign({env:process.env},t);const r=Object.assign({},t.env),n=o({env:r});return t.path=r[n],r[n]=e.exports(t),r})},function(e,t,r){"use strict";var n=e.exports=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.pipe};n.writable=function(e){return n(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState},n.readable=function(e){return n(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState},n.duplex=function(e){return n.writable(e)&&n.readable(e)},n.transform=function(e){return n.duplex(e)&&"function"==typeof e._transform&&"object"==typeof e._transformState}},function(e,t,r){"use strict";const n=r(35),o=r(38);class s extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}}function i(e,t){if(!e)return Promise.reject(new Error("Expected a stream"));t=Object.assign({maxBuffer:1/0},t);const{maxBuffer:r}=t;let i;return new Promise((a,c)=>{const u=e=>{e&&(e.bufferedData=i.getBufferedValue()),c(e)};(i=n(e,o(t),e=>{e?u(e):a()})).on("data",()=>{i.getBufferedLength()>r&&u(new s)})}).then(()=>i.getBufferedValue())}e.exports=i,e.exports.buffer=((e,t)=>i(e,Object.assign({},t,{encoding:"buffer"}))),e.exports.array=((e,t)=>i(e,Object.assign({},t,{array:!0}))),e.exports.MaxBufferError=s},function(e,t,r){var n=r(11),o=r(37),s=r(3),i=function(){},a=/^v?\.0/.test(process.version),c=function(e){return"function"==typeof e},u=function(e,t,r,u){u=n(u);var l=!1;e.on("close",function(){l=!0}),o(e,{readable:t,writable:r},function(e){if(e)return u(e);l=!0,u()});var f=!1;return function(t){if(!l&&!f)return f=!0,function(e){return!!a&&!!s&&(e instanceof(s.ReadStream||i)||e instanceof(s.WriteStream||i))&&c(e.close)}(e)?e.close(i):function(e){return e.setHeader&&c(e.abort)}(e)?e.abort():c(e.destroy)?e.destroy():void u(t||new Error("stream was destroyed"))}},l=function(e){e()},f=function(e,t){return e.pipe(t)};e.exports=function(){var e,t=Array.prototype.slice.call(arguments),r=c(t[t.length-1]||i)&&t.pop()||i;if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new Error("pump requires two streams per minimum");var n=t.map(function(o,s){var i=s<t.length-1;return u(o,i,s>0,function(t){e||(e=t),t&&n.forEach(l),i||(n.forEach(l),r(e))})});return t.reduce(f)}},function(e,t){e.exports=function e(t,r){if(t&&r)return e(t)(r);if("function"!=typeof t)throw new TypeError("need wrapper function");Object.keys(t).forEach(function(e){n[e]=t[e]});return n;function n(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];var n=t.apply(this,e),o=e[e.length-1];return"function"==typeof n&&n!==o&&Object.keys(o).forEach(function(e){n[e]=o[e]}),n}}},function(e,t,r){var n=r(11),o=function(){},s=function(e,t,r){if("function"==typeof t)return s(e,null,t);t||(t={}),r=n(r||o);var i=e._writableState,a=e._readableState,c=t.readable||!1!==t.readable&&e.readable,u=t.writable||!1!==t.writable&&e.writable,l=function(){e.writable||f()},f=function(){u=!1,c||r.call(e)},p=function(){c=!1,u||r.call(e)},d=function(t){r.call(e,t?new Error("exited with error code: "+t):null)},h=function(t){r.call(e,t)},m=function(){return(!c||a&&a.ended)&&(!u||i&&i.ended)?void 0:r.call(e,new Error("premature close"))},v=function(){e.req.on("finish",f)};return!function(e){return e.setHeader&&"function"==typeof e.abort}(e)?u&&!i&&(e.on("end",l),e.on("close",l)):(e.on("complete",f),e.on("abort",m),e.req?v():e.on("request",v)),function(e){return e.stdio&&Array.isArray(e.stdio)&&3===e.stdio.length}(e)&&e.on("exit",d),e.on("end",p),e.on("finish",f),!1!==t.error&&e.on("error",h),e.on("close",m),function(){e.removeListener("complete",f),e.removeListener("abort",m),e.removeListener("request",v),e.req&&e.req.removeListener("finish",f),e.removeListener("end",l),e.removeListener("close",l),e.removeListener("finish",f),e.removeListener("exit",d),e.removeListener("end",p),e.removeListener("error",h),e.removeListener("close",m)}};e.exports=s},function(e,t,r){"use strict";const{PassThrough:n}=r(39);e.exports=(e=>{e=Object.assign({},e);const{array:t}=e;let{encoding:r}=e;const o="buffer"===r;let s=!1;t?s=!(r||o):r=r||"utf8",o&&(r=null);let i=0;const a=[],c=new n({objectMode:s});return r&&c.setEncoding(r),c.on("data",e=>{a.push(e),s?i=a.length:i+=e.length}),c.getBufferedValue=(()=>t?a:o?Buffer.concat(a,i):a.join("")),c.getBufferedLength=(()=>i),c})},function(e,t){e.exports=require("stream")},function(e,t,r){"use strict";e.exports=((e,t)=>(t=t||(()=>{}),e.then(e=>new Promise(e=>{e(t())}).then(()=>e),e=>new Promise(e=>{e(t())}).then(()=>{throw e}))))},function(e,t,r){var n,o=r(42),s=r(43),i=r(44);function a(){l&&(l=!1,s.forEach(function(e){try{process.removeListener(e,u[e])}catch(e){}}),process.emit=h,process.reallyExit=p,n.count-=1)}function c(e,t,r){n.emitted[e]||(n.emitted[e]=!0,n.emit(e,t,r))}"function"!=typeof i&&(i=i.EventEmitter),process.__signal_exit_emitter__?n=process.__signal_exit_emitter__:((n=process.__signal_exit_emitter__=new i).count=0,n.emitted={}),n.infinite||(n.setMaxListeners(1/0),n.infinite=!0),e.exports=function(e,t){o.equal(typeof e,"function","a callback must be provided for exit handler"),!1===l&&f();var r="exit";t&&t.alwaysLast&&(r="afterexit");return n.on(r,e),function(){n.removeListener(r,e),0===n.listeners("exit").length&&0===n.listeners("afterexit").length&&a()}},e.exports.unload=a;var u={};s.forEach(function(e){u[e]=function(){process.listeners(e).length===n.count&&(a(),c("exit",null,e),c("afterexit",null,e),process.kill(process.pid,e))}}),e.exports.signals=function(){return s},e.exports.load=f;var l=!1;function f(){l||(l=!0,n.count+=1,s=s.filter(function(e){try{return process.on(e,u[e]),!0}catch(e){return!1}}),process.emit=m,process.reallyExit=d)}var p=process.reallyExit;function d(e){process.exitCode=e||0,c("exit",process.exitCode,null),c("afterexit",process.exitCode,null),p.call(process,process.exitCode)}var h=process.emit;function m(e,t){if("exit"===e){void 0!==t&&(process.exitCode=t);var r=h.apply(this,arguments);return c("exit",process.exitCode,null),c("afterexit",process.exitCode,null),r}return h.apply(this,arguments)}},function(e,t){e.exports=require("assert")},function(e,t){e.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==process.platform&&e.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===process.platform&&e.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")},function(e,t){e.exports=require("events")},function(e,t,r){"use strict";const n=r(46);let o;if("function"==typeof n.getSystemErrorName)e.exports=n.getSystemErrorName;else{try{if("function"!=typeof(o=process.binding("uv")).errname)throw new TypeError("uv.errname is not a function")}catch(e){console.error("execa/lib/errname: unable to establish process.binding('uv')",e),o=null}e.exports=(e=>s(o,e))}function s(e,t){if(e)return e.errname(t);if(!(t<0))throw new Error("err >= 0");return`Unknown system error ${t}`}e.exports.__test__=s},function(e,t){e.exports=require("util")},function(e,t,r){"use strict";const n=["stdin","stdout","stderr"];e.exports=(e=>{if(!e)return null;if(e.stdio&&(e=>n.some(t=>Boolean(e[t])))(e))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${n.map(e=>`\`${e}\``).join(", ")}`);if("string"==typeof e.stdio)return e.stdio;const t=e.stdio||[];if(!Array.isArray(t))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof t}\``);const r=[],o=Math.max(t.length,n.length);for(let s=0;s<o;s++){let o=null;void 0!==t[s]?o=t[s]:void 0!==e[n[s]]&&(o=e[n[s]]),r[s]=o}return r})},function(e,t){e.exports=require("net")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(6)),s=r(1),i=r(8),a=n(r(0)),c=r(50);class u{constructor(){if(this.start=(async(e,t)=>{a.default.loading("Starting postgres container");const{port:r,service:n}=e,s=t?`--file ${t}`:"";await o.default.shell(`docker-compose ${s} run --detach --no-deps --publish ${r}:5432 ${n}`);const c=await i.getContainerId(n);return a.default.success("Postgres container started successfully"),c}),this.checkHealth=(async(e,t)=>{await this.checkResponsiveness(e,t),await this.checkConnection(t)}),this.teardown=(async(e,t)=>c.teardownSingle(e,t)),this.checkResponsiveness=(async(e,t)=>{a.default.loading("Attempting to establish database responsiveness");const{responsivenessTimeout:r=10,host:n,username:c,database:u}=t,l=async t=>{if(a.default.loading(`Establishing database responsiveness (Timing out in: ${t}s)`),t<=0)throw new s.DockestError("Database responsiveness timed out");try{await o.default.shell(`docker exec ${e} bash -c "psql -h ${n} -U ${c} -d ${u} -c 'select 1'"`),a.default.success("Database responsiveness established")}catch(e){t--,await i.sleep(1e3),await l(t)}};await l(r)}),this.checkConnection=(async e=>{}),u.instance)return u.instance;u.instance=this}}t.default=u},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(6)),s=r(1),i=n(r(0));t.teardownSingle=(async(e,t)=>{if(!e)throw new s.DockestError("No containerId");await a(e,t),await c(e,t)});const a=async(e,t)=>{await o.default.shell(`docker stop ${e}`),i.default.loading(`Stopped service container: "${t}" `)},c=async(e,t)=>{await o.default.shell(`docker rm ${e} --volumes`),i.default.loading(`Removed service container: "${t}"`)}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(1),s=n(r(0)),i={projects:["."]};class a{constructor(e){if(this.run=(async()=>{const e=a.config,t=a.config.lib;let r=!1;s.default.success("Dependencies up and running, running Jest");try{(await t.runCLI(e,e.projects)).results.success?(s.default.success("Jest run successfully"),r=!0):(s.default.failed("Jest test(s) failed"),r=!1)}catch(e){s.default.error("Encountered Jest error",e),r=!1}return{success:r}}),this.validateJestConfig=(e=>{if(!e)throw new o.ConfigurationError("Jest config missing");if(e.lib.getVersion()<"20.0.0")throw new o.ConfigurationError("Jest version not supported")}),a.instance)return a.instance;this.validateJestConfig(e),a.config=Object.assign({},i,e),a.instance=this}}t.default=a}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,